// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Spell {
  id            Int                @id @default(autoincrement())
  level         Int
  name          String
  casting       String
  range         String
  duration      String
  description   String
  concentration Boolean
  components    String
  material      String
  school        String
  classes       SpellClass[]
  spellList     PlayerSpellsList[]
}

model Classes {
  id             Int          @id @default(autoincrement())
  name           String
  spells         SpellClass[]
  description    String
  lang_es        String
  description_es String
  primaryChar    String
  secondaryChar  String
}

model SpellClass {
  id      Int     @id @default(autoincrement())
  spellId Int
  spell   Spell   @relation(fields: [spellId], references: [id])
  classId Int
  class   Classes @relation(fields: [classId], references: [id])
}

model Player {
  id                 String             @id @default(cuid())
  name               String
  className          String
  race               String
  background         String
  alignment          String
  userId             String
  experience         Int
  level              Int
  proficiency        Int
  PlayerSkills       PlayerSkills[]
  PlayerAbilities    PlayerAttributes[]
  PLayerSpellsWeapon SpellsWeapon[]
  PlayerMoney        Money[]
  PlayerSpells       PlayerSpells[]
  PlayerSpellsList   PlayerSpellsList[]
  user               User               @relation(fields: [userId], references: [id])
}

model PlayerAttributes {
  id                      Int     @id @default(autoincrement())
  Strength                Int
  Dexterity               Int
  Constitution            Int
  Intelligence            Int
  Wisdom                  Int
  Charisma                Int
  StrengthProficiency     Boolean
  DexterityProficiency    Boolean
  ConstitutionProficiency Boolean
  IntelligenceProficiency Boolean
  WisdomProficiency       Boolean
  CharismaProficiency     Boolean
  playerId                String?
  player                  Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model PlayerSkills {
  id             Int     @id @default(autoincrement())
  Acrobatics     Boolean @default(false) // Dexterity
  AnimalHandling Boolean @default(false) // Wisdom
  Arcana         Boolean @default(false) // Intelligence
  Athletics      Boolean @default(false) // Strength
  Deception      Boolean @default(false) // Charisma
  History        Boolean @default(false) // Intelligence
  Insight        Boolean @default(false) // Wisdom
  Intimidation   Boolean @default(false) // Charisma
  Investigation  Boolean @default(false) // Intelligence
  Medicine       Boolean @default(false) // Wisdom
  Nature         Boolean @default(false) // Intelligence
  Perception     Boolean @default(false) // Wisdom
  Performance    Boolean @default(false) // Charisma
  Persuasion     Boolean @default(false) // Charisma
  Religion       Boolean @default(false) // Intelligence
  SleightOfHand  Boolean @default(false) // Dexterity
  Stealth        Boolean @default(false) // Dexterity
  Survival       Boolean @default(false) // Wisdom
  playerId       String?
  player         Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

// Auth

model User {
  id            String    @id @default(cuid())
  // name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String    @default("user")
  image         String?
  //accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  players       Player[]
}

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String?
//   access_token             String?
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String?
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

// Inventory
model SpellsWeapon {
  id         Int    @id @default(autoincrement())
  name       String
  bonus      Int
  DamageType String
  playerId   String
  player     Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model Money {
  id       Int    @id @default(autoincrement())
  pc       Int    @default(0)
  pp       Int    @default(0)
  pe       Int    @default(0)
  po       Int    @default(0)
  ppt      Int    @default(0)
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model PlayerSpells {
  id           Int    @id @default(autoincrement())
  playerId     String
  level_0      Int
  level_1      Int
  level_2      Int
  level_3      Int
  level_4      Int
  level_5      Int
  level_6      Int
  level_7      Int
  level_8      Int
  level_9      Int
  level_0_used Int
  level_1_used Int
  level_2_used Int
  level_3_used Int
  level_4_used Int
  level_5_used Int
  level_6_used Int
  level_7_used Int
  level_8_used Int
  level_9_used Int
  player       Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model PlayerSpellsList {
  id       Int     @id @default(autoincrement())
  spellId  Int
  playerId String
  ready    Boolean
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  spell    Spell   @relation(fields: [spellId], references: [id], onDelete: Cascade)
}
