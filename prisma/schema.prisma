// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Spell {
  id            Int          @id @default(autoincrement())
  level         Int
  name          String
  casting       String
  range         String
  duration      String
  description   String
  concentration Boolean
  components    String
  material      String
  school        String
  classes       SpellClass[]
}

model Classes {
  id             Int          @id @default(autoincrement())
  name           String
  spells         SpellClass[]
  description    String
  lang_es        String
  description_es String
  primaryChar    String
  secondaryChar  String
}

model SpellClass {
  id      Int     @id @default(autoincrement())
  spellId Int
  spell   Spell   @relation(fields: [spellId], references: [id])
  classId Int
  class   Classes @relation(fields: [classId], references: [id])
}

model Player {
  id              String            @id @default(cuid())
  name            String
  className       String
  race            String
  background      String
  alignment       String
  playerName      String
  experience      Int
  level           Int
  PlayerSkills    PlayerSkills[]
  PlayerAbilities PlayerAbilities[]
}

model PlayerAbilities {
  id                     Int     @id @default(autoincrement())
  Strength               Int
  Dexterity              Int
  Constitution           Int
  Intelligence           Int
  Wisdom                 Int
  Charisma               Int
  StrengthCompetence     Boolean
  DexterityCompetence    Boolean
  ConstitutionCompetence Boolean
  IntelligenceCompetence Boolean
  WisdomCompetence       Boolean
  CharismaCompetence     Boolean
  playerId               String?
  player                 Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model PlayerSkills {
  id             Int     @id @default(autoincrement())
  Acrobatics     Boolean @default(false) // Dexterity
  AnimalHandling Boolean @default(false) // Wisdom
  Arcana         Boolean @default(false) // Intelligence
  Athletics      Boolean @default(false) // Strength
  Deception      Boolean @default(false) // Charisma
  History        Boolean @default(false) // Intelligence
  Insight        Boolean @default(false) // Wisdom
  Intimidation   Boolean @default(false) // Charisma
  Investigation  Boolean @default(false) // Intelligence
  Medicine       Boolean @default(false) // Wisdom
  Nature         Boolean @default(false) // Intelligence
  Perception     Boolean @default(false) // Wisdom
  Performance    Boolean @default(false) // Charisma
  Persuasion     Boolean @default(false) // Charisma
  Religion       Boolean @default(false) // Intelligence
  SleightOfHand  Boolean @default(false) // Dexterity
  Stealth        Boolean @default(false) // Dexterity
  Survival       Boolean @default(false) // Wisdom
  playerId       String?
  player         Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

// Auth

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("user")
  image         String?
  //accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String  @unique
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String?
//   access_token             String?
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String?
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User?   @relation(fields: [userId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model VerificationToken {
//   identifier String   @unique
//   token      String
//   expires    DateTime

//   @@id([identifier])
// }
